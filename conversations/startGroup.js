//const {InlineKeyboard} = require("grammy");
const { msg } = require('./allMessages')
const { getLastMessage } = require('../utils/utils')

exports.defaultMessage = async (ctx) => {
     // todo: –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î

     await ctx.reply(msg.white13)
     console.log(`–Æ–∑–µ—Ä ${ctx.from.id} –ø–∏—à–µ: ${ctx.message}`)

     // todo: –ø—Ä–æ–¥—É–±–ª—é–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î
}


exports.startMessage = async (ctx) => {
     await getLastMessage(ctx)

     await ctx.reply(msg['white1'])
     await ctx.reply(msg['white2'], {
          reply_markup: {
               inline_keyboard: [
                    [{ text: "–•–ª–æ–ø–µ—Ü—å", callback_data: "gender_male/white2" }],
                    [{ text: "–î—ñ–≤—á–∏–Ω–∞", callback_data: "gender_female/white2" }]
               ]
          }
     });
}

exports.gender = async (ctx, sex) => {
     await getLastMessage(ctx)
     // ToDo: –∑–∞–ø–∏—Å –≤ –ë–î —Å—Ç–∞—Ç—ñ —é–∑–µ—Ä–∞
     // "–¢–µ–ø–µ—Ä —Ä–æ–∑–±–µ—Ä—ñ–º–æ—Å—è –∑ —Ç–≤–æ—ó–º –∑–∞–ø–∏—Ç–æ–º"
     await ctx.reply(msg.white3);

     // –ø–∞—É–∑–∞
     await ctx.replyWithChatAction('typing');
     await new Promise(resolve => setTimeout(resolve, 2000));
     // "–¢–µ–±–µ —â–æ—Å—å —Ö–≤–∏–ª—é—î"
     await ctx.reply(msg.white4, {
          reply_markup: {
               inline_keyboard: [
                    [{ text: "–¢–∞–∫", callback_data: "whatsUp/white4" }],
                    [{ text: "–ù—ñ", callback_data: "wannaTalk/white4" }],
                    [{ text: "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data: "thanksTakeCare/white4" }]
               ]
          }
     });
}

exports.wannaTalk = async (ctx) => {
     await getLastMessage(ctx)
     // "–ö—Ä—É—Ç–æ, –ø—Ä–∏—î–º–Ω–æ –±—É–ª–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è! –ü—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏?"
     await ctx.reply(msg.white5, {
          reply_markup: {
               inline_keyboard: [
                    [{ text: "–¢–∞–∫", callback_data: "sorryBye/white5" }],
                    [{ text: "–ù—ñ", callback_data: "byeThen/white5" }]
               ]
          }
     });
}

exports.byeThen = async (ctx) => {
     await getLastMessage(ctx)
     //—Ç–æ–¥—ñ –±—É–≤–∞–π
     await ctx.reply(msg.white6, {
          reply_markup: {
               inline_keyboard: [
                    [{ text: "–¢–∏—Ü—å!", callback_data: "restartBot/white6" }]
               ]
          }
     });
}

exports.sorryBye = async (ctx) => {
     await getLastMessage(ctx)
     // "–í–∏–±–∞—á, —è —Ç—Ä–æ—Ö–∏ –Ω–∞ —ñ–Ω—à–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–æ–≤–∞–Ω–∏–π"
     await ctx.reply(msg.white7, {
          reply_markup: {
               inline_keyboard: [
                    [{ text: "–¢–∏—Ü—å!", callback_data: "restartBot/white7" }]
               ]
          }
     });
}

exports.whatsUp = async (ctx) => {
     await getLastMessage(ctx)
     // "–†–æ–∑–∫–∞–∂–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ —Å–∞–º–µ —Ç–µ–±–µ —Ç—É—Ä–±—É—î. –¢–µ–±–µ –æ–±—Ä–∞–∂–∞—é—Ç—å –≤ —à–∫–æ–ª—ñ?"
     await ctx.reply(msg.white8, {
          reply_markup: {
               inline_keyboard: [
                    [{ text: "–¢–∞–∫", callback_data: "bullyingAbout/white8" }],
                    [{ text: "–ù—ñ", callback_data: "red1/white8" }]
               ]
          }
     });
}

exports.thanksTakeCare = async (ctx) => {
     await getLastMessage(ctx)
     await ctx.reply(msg.white11, {
          reply_markup: {
               inline_keyboard: [
                    [{ text: "–¢–∏—Ü—å!", callback_data: "restartBot/white11" }]
               ]
          }
     });
}

exports.restartBot = async (ctx) => {
     await getLastMessage(ctx)
     // –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ —Å–ø–æ—á–∞—Ç–∫—É?
     await ctx.reply(msg.white12, {
          reply_markup: {
               inline_keyboard: [
                    [{ text: "–¢–∞–∫", callback_data: "startMessage/white12" }]
               ]
          }
     });
}

exports.bullyingAbout = async (ctx) => {
     await getLastMessage(ctx)
     // –ü–æ—á–∏—Ç–∞–π —É–≤–∞–∂–Ω–æ, —á–∏ —Å—Ö–æ–∂–µ –Ω–∞ —Ç–≤—ñ–π –¥–æ—Å–≤—ñ–¥
     await ctx.reply(msg.white9, {
          parse_mode: "HTML",
          reply_markup: {
               inline_keyboard: [
                    [{ text: "–¢–∞–∫", callback_data: "yourRole/white9" }],
                    [{ text: "–ù—ñ", callback_data: "red1/white9" }]
               ]
          }
     });
}

exports.yourRole = async (ctx) => {
     await getLastMessage(ctx)
     // "–ú–µ–Ω—ñ –¥—É–∂–µ —à–∫–æ–¥–∞, —â–æ —Ç–∞–∫ —Å—Ç–∞–ª–æ—Å—è"
     await ctx.reply(msg.white10, {
          reply_markup: {
               inline_keyboard: [
                    [{ text: "–ú—ñ—à–µ–Ω—å –±—É–ª—ñ–Ω–≥—É", callback_data: "notReadyYet/white10" }],
                    [{ text: "–°–≤—ñ–¥–æ–∫ –±—É–ª—ñ–Ω–≥—É", callback_data: "yellow1/white10" }],
                    [{ text: "–ù–∞–ø–∞–¥–Ω–∏–∫", callback_data: "pink1/white10" }],
                    [{ text: "–î–æ—Ä–æ—Å–ª–∏–π", callback_data: "blue1/white10" }],

               ]
          }
     });
}


exports.notReadyYet = async (ctx) => {
     await getLastMessage(ctx)
     // "–¥—ñ–∞–ª–æ–≥ –Ω–µ –≥–æ—Ç–æ–≤–∏–π"
     await ctx.reply(msg.white14, {
          reply_markup: {
               inline_keyboard: [
                    [{ text: "üåÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏", callback_data: "startMessage/white14" }],
               ]
          }
     });
}

/// test
// exports.testMessage = async (ctx) => {
//      //await ctx.deleteMessage()
//
//      const keyboard = new InlineKeyboard()
//          .url("–ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏?", "tg://resolve?phone=116111");
//      await ctx.reply(
//          `–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π –∑–∞ –Ω–æ–º–µ—Ä–æ–º [911](tel:911) —Ç–∞ [\\+380972878635](tel:\\+380972878635)`,
//          {
//               parse_mode: "MarkdownV2",
//               reply_markup: keyboard,
//               disable_web_page_preview: true
//          }
//         );
// }