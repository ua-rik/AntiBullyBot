const { msg } = require('./allMessages')
const { getLastMessage } = require('../utils/utils')

exports.green1 = async (ctx) => {
    await getLastMessage(ctx)
    // "–¶–µ –±—É–ª–æ –ø–æ–Ω–∞–¥ –æ–¥–∏–Ω —Ä–∞–∑? "
    await ctx.reply(msg.green1, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green2/green1"}],
                [{text: "–ù—ñ", callback_data: "green4/green1"}],
            ]
        }
    });
}

exports.green2 = async (ctx) => {
    await getLastMessage(ctx)
    // "–¢–æ–±—ñ –±—É–ª–æ –±–æ–ª—è—á–µ —Ñ—ñ–∑–∏—á–Ω–æ —á–∏ –Ω–∞ –¥—É—à—ñ, —Å—Ç—Ä–∞—à–Ω–æ, –Ω–µ–ø—Ä–∏—î–º–Ω–æ? "
    await ctx.reply(msg.green2, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green3/green2"}],
                [{text: "–ù—ñ", callback_data: "green4/green2"}],
            ]
        }
    });
}

exports.green3 = async (ctx) => {
    await getLastMessage(ctx)
    // "–ß–∏ —Ç–æ–±—ñ –± –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ —Ü—ñ –Ω–∞–ø–∞–¥–∫–∏, —è–∫–±–∏ –∑–∞—Ö–æ—Ç—ñ–ª–æ—Å—è?"
    await ctx.reply(msg.green3, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green4/green3"}],
                [{text: "–ù—ñ", callback_data: "green5/green3"}],
            ]
        }
    });
}

exports.green4 = async (ctx) => {
    await getLastMessage(ctx)
    // "–Ø–∫—â–æ —Å–∏—Ç—É–∞—Ü—ñ—è —Ç—Ä–∞–ø–∏–ª–∞—Å—è –∑ —Ç–æ–±–æ—é –æ–¥–∏–Ω —Ä–∞–∑ –∞–±–æ..."
    await ctx.reply(msg.green4, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "whatsUp/green4"}],
                [{text: "–ù—ñ", callback_data: "wannaTalk/green4"}],
            ]
        }
    });
}


exports.green5 = async (ctx) => {
    await getLastMessage(ctx)
    // "–¢–æ–±—Ç–æ —â–æ—Å—å —Å—Ç–æ—ó—Ç—å –Ω–∞ –∑–∞–≤–∞–¥—ñ, ..."
    await ctx.reply(msg.green5, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green7/green5"}],
                [{text: "–ù—ñ", callback_data: "green6/green5"}],
            ]
        }
    });
}

exports.green6 = async (ctx) => {
    await getLastMessage(ctx)
    // "–ß—É–¥–æ–≤–æ, —è —Ä–∞–¥—ñ—é, —â–æ —Ç–∏ –º–æ–∂–µ—à —Å–µ–±–µ –∑–∞—Ö–∏—Å—Ç–∏—Ç–∏ ü©∑ ..."
    await ctx.reply(msg.green6, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green12/green6"}],
                [{text: "–ù—ñ", callback_data: "green9/green6"}],
            ]
        }
    });
}

exports.green7 = async (ctx) => {
    await getLastMessage(ctx)
    // "–ß–∏ –ø–æ–≤—ñ–¥–æ–º–ª—è–≤/-–ª–∞ —Ç–∏ –ø—Ä–æ —Å–∏—Ç—É–∞—Ü—ñ—é –∫–æ–º—É—Å—å –∑ –¥–æ—Ä–æ—Å–ª–∏—Ö?"
    await ctx.reply(msg.green7, { // ToDo: add gender
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green8/green7"}],
                [{text: "–ù—ñ", callback_data: "green9/green7"}],
            ]
        }
    });
}

exports.green8 = async (ctx) => {
    await getLastMessage(ctx) //  ToDo: add gender
    // "–¶–µ —á—É–¥–æ–≤–æ! –°–ø–æ–¥—ñ–≤–∞—é—Å—è, —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–≥–ª–∏?"
    await ctx.reply(msg.green8, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green15/green8"}], // ToDo: check logic
                [{text: "–ù—ñ", callback_data: "green10/green8"}],
            ]
        }
    });
}

exports.green9 = async (ctx) => {
    await getLastMessage(ctx)
    // "–î–∏–≤–∏—Å—è: —É 46% –ø—ñ—Å–ª—è –≤—Ç—Ä—É—á–∞–Ω–Ω—è –¥–æ—Ä–æ—Å–ª–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è... "
    await ctx.reply(msg.green9, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green12/green9"}],
                [{text: "–ù—ñ", callback_data: "green11/green9"}],
            ]
        }
    });
}

exports.green10 = async (ctx) => {
    await getLastMessage(ctx)
    // "–û—Ç —Ö–∞–ª–µ–ø–∞! üòî ..."
    await ctx.reply(msg.green10, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green11/green10"}],
            ]
        }
    });
}

exports.green11 = async (ctx) => {
    await getLastMessage(ctx)
    // "–¢–µ, –∑ —á–∏–º —Ç–∏ —Å—Ç–∏–∫–∞—î—à—Å—è, –¥—É–∂–µ –∂–∞—Ö–ª–∏–≤–æ —ñ ..."
    await ctx.reply(msg.green11, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green12/green11"}],
                [{text: "–ù—ñ", callback_data: "green13/green11"}],
            ]
        }
    });
}


exports.green12 = async (ctx) => {
    await getLastMessage(ctx)
    // "–ß—É–¥–æ–≤–æ! –¢–∏ –∑–Ω–∞—î—à, —â–æ —Ç–∏ –º–æ–ª–æ–¥–µ—Ü—å? ü§©"
    await ctx.reply(msg.green12, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green15/green12"}],
                [{text: "–ù—ñ", callback_data: "green14/green12"}],
            ]
        }
    });
}

exports.green13 = async (ctx) => {
    await getLastMessage(ctx)
    // "–ü—Ä–∏–∫—Ä–æ —Ü–µ —á—É—Ç–∏ :(\ –ê–ª–µ —Ç–∏ –∂ –∑–Ω–∞—î—à, —â–æ —Ç–∏ –º–æ–ª–æ–¥–µ—Ü—å?"
    await ctx.reply(msg.green13, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green15/green13"}],
                [{text: "–ù—ñ", callback_data: "green14/green13"}],
            ]
        }
    });
}

exports.green14 = async (ctx) => {
    await getLastMessage(ctx)
    // "–Ø –¥—É–∂–µ —Ä–∞–¥–∂—É —Ç–æ–±—ñ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª..."
    await ctx.reply(msg.green14, {
        parse_mode: "HTML",
        disable_web_page_preview: true,
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∞–∫", callback_data: "green15/green14"}],
                [{text: "–ù—ñ", callback_data: "red1/green14"}],
            ]
        }
    });
}

exports.green15 = async (ctx) => {
    await getLastMessage(ctx)
    // "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ë—É–ª—ñ–Ω–≥ –≤ —à–∫–æ–ª—ñ ‚Äî —Ü–µ –¥—É–∂–µ..."
    await ctx.reply(msg.green15, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–î–∞—Ç–∏ –∑–¥–∞—á—ñ", callback_data: "green16/green15"}],
                [{text: "–†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –±–∞—Ç—å–∫–∞–º", callback_data: "green19/green15"}],
                [{text: "–†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –≤—á–∏—Ç–µ–ª—è–º", callback_data: "green19/green15"}],
                [{text: "–ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç–∏/—Ç–µ—Ä–ø—ñ—Ç–∏", callback_data: "green18/green15"}],
                [{text: "–°–≤–∞—Ä–∏—Ç–∏ —Å–µ–±–µ", callback_data: "green17/green15"}],

            ]
        }
    });
}

exports.green16 = async (ctx) => {
    await getLastMessage(ctx)
    // "–¶–µ –ø–æ–≥–∞–Ω–∞ —ñ–¥–µ—è, –±–æ, –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é, —Å–∞–º–µ —Ç–æ–≥–æ, —Ö—Ç–æ –± º—î—Ç—å—Å—è ..."
    await ctx.reply(msg.green16, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∏—Ü—å!", callback_data: "green19/green16"}],
            ]
        }
    });
}

exports.green17 = async (ctx) => {
    await getLastMessage(ctx)
    // "–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –ø–æ–∫–∞–∑—É—é—Ç—å, —â–æ –º—ñ—à–µ–Ω—è–º–∏ –±—É–ª—ñ–Ω–≥—É –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ —Å—Ç–∞—é—Ç—å ..."
    await ctx.reply(msg.green17, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∏—Ü—å!", callback_data: "green19/green17"}],
            ]
        }
    });
}

exports.green18 = async (ctx) => {
    await getLastMessage(ctx)
    // "–Ø–∫—â–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Ä–ø—ñ—Ç–∏, —Ç–æ —É —Ç–µ–±–µ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∑—Ä–æ—Å—Ç–∞—Ç–∏–º–µ ..."
    await ctx.reply(msg.green18, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∏—Ü—å!", callback_data: "green19/green18"}],
            ]
        }
    });
}

exports.green19 = async (ctx) => {
    await getLastMessage(ctx)
    // "–î–∞–≤–∞–π –¥–æ–º–æ–≤–∏–º–æ—Å—è –ø—Ä–æ —Ç–∞–∫–µ: ..."
    await ctx.reply(msg.green19, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∏—Ü—å!", callback_data: "green20/green19"}],
                [{text: "–¢–∏—Ü—å!", callback_data: "green21/green19"}],
            ]
        }
    });
}

exports.green20 = async (ctx) => {
    await getLastMessage(ctx)
    // " –î–æ–±—Ä–µ, —á—É–¥–æ–≤–æ! ..."
    await ctx.reply(msg.green20, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∏—Ü—å!", callback_data: "green22/green20"}],
            ]
        }
    });
}

exports.green21 = async (ctx) => {
    await getLastMessage(ctx)
    // " –ú–µ–Ω—ñ –¥—É–∂–µ –ø—Ä–∏–∫—Ä–æ, —â–æ —Ç–∏ –æ–±–∏—Ä–∞—î—à —Ü—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å ..."
    await ctx.reply(msg.green21, {
        parse_mode: "HTML",
        disable_web_page_preview: true,
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∏—Ü—å!", callback_data: "green22/green21"}],
            ]
        }
    });
}

exports.green22 = async (ctx) => {
    await getLastMessage(ctx)
    // " –ö–æ–ª–∏ —Ç–æ–±—ñ —Ä–æ–±–ª—è—Ç—å –±–æ–ª—è—á–µ, ..."
    await ctx.reply(msg.green22, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∏—Ü—å!", callback_data: "green23/green22"}],
            ]
        }
    });
}

exports.green23 = async (ctx) => {
    await getLastMessage(ctx)
    // " –ö–æ–ª–∏ —Ç–æ–±—ñ —Ä–æ–±–ª—è—Ç—å –±–æ–ª—è—á–µ, ..."
    await ctx.reply(msg.green23, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–¢–∏—Ü—å!", callback_data: "restartBot/green23"}],
            ]
        }
    });
}
